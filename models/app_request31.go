// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppRequest31 app request 31
// swagger:model app_request_31
type AppRequest31 struct {

	// role
	// Required: true
	// Format: uuid
	Role *strfmt.UUID `json:"role"`

	// scope
	// Required: true
	// Enum: [read manage]
	Scope *string `json:"scope"`
}

// Validate validates this app request 31
func (m *AppRequest31) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppRequest31) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if err := validate.FormatOf("role", "body", "uuid", m.Role.String(), formats); err != nil {
		return err
	}

	return nil
}

var appRequest31TypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read","manage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appRequest31TypeScopePropEnum = append(appRequest31TypeScopePropEnum, v)
	}
}

const (

	// AppRequest31ScopeRead captures enum value "read"
	AppRequest31ScopeRead string = "read"

	// AppRequest31ScopeManage captures enum value "manage"
	AppRequest31ScopeManage string = "manage"
)

// prop value enum
func (m *AppRequest31) validateScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, appRequest31TypeScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AppRequest31) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", *m.Scope); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppRequest31) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppRequest31) UnmarshalBinary(b []byte) error {
	var res AppRequest31
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
