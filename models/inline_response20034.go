// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InlineResponse20034 inline response 200 34
// swagger:model inline_response_200_34
type InlineResponse20034 struct {

	// resource type
	// Required: true
	ResourceType *string `json:"_type"`

	// links
	// Required: true
	Links *InlineResponse20033EmbeddedLinks `json:"_links"`

	// aggregator allocation
	// Required: true
	AggregatorAllocation []string `json:"aggregator_allocation"`

	// aggregator ca certificate
	// Required: true
	AggregatorCaCertificate *string `json:"aggregator_ca_certificate"`

	// aggregator ca private key blob
	// Required: true
	AggregatorCaPrivateKeyBlob *string `json:"aggregator_ca_private_key_blob"`

	// aggregator docker name
	// Required: true
	AggregatorDockerName *string `json:"aggregator_docker_name"`

	// aggregator host
	// Required: true
	AggregatorHost *string `json:"aggregator_host"`

	// aggregator instance id
	// Required: true
	AggregatorInstanceID *string `json:"aggregator_instance_id"`

	// aggregator port mapping
	// Required: true
	AggregatorPortMapping [][]int64 `json:"aggregator_port_mapping"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// drain configuration
	// Required: true
	DrainConfiguration *InlineResponse20033EmbeddedDrainConfiguration `json:"drain_configuration"`

	// drain type
	// Required: true
	DrainType *string `json:"drain_type"`

	// handle
	// Required: true
	Handle *string `json:"handle"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// status
	// Required: true
	Status *string `json:"status"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this inline response 200 34
func (m *InlineResponse20034) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregatorAllocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregatorCaCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregatorCaPrivateKeyBlob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregatorDockerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregatorHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregatorInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregatorPortMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrainType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20034) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20034) validateAggregatorAllocation(formats strfmt.Registry) error {

	if err := validate.Required("aggregator_allocation", "body", m.AggregatorAllocation); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateAggregatorCaCertificate(formats strfmt.Registry) error {

	if err := validate.Required("aggregator_ca_certificate", "body", m.AggregatorCaCertificate); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateAggregatorCaPrivateKeyBlob(formats strfmt.Registry) error {

	if err := validate.Required("aggregator_ca_private_key_blob", "body", m.AggregatorCaPrivateKeyBlob); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateAggregatorDockerName(formats strfmt.Registry) error {

	if err := validate.Required("aggregator_docker_name", "body", m.AggregatorDockerName); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateAggregatorHost(formats strfmt.Registry) error {

	if err := validate.Required("aggregator_host", "body", m.AggregatorHost); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateAggregatorInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("aggregator_instance_id", "body", m.AggregatorInstanceID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateAggregatorPortMapping(formats strfmt.Registry) error {

	if err := validate.Required("aggregator_port_mapping", "body", m.AggregatorPortMapping); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateDrainConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("drain_configuration", "body", m.DrainConfiguration); err != nil {
		return err
	}

	if m.DrainConfiguration != nil {
		if err := m.DrainConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("drain_configuration")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20034) validateDrainType(formats strfmt.Registry) error {

	if err := validate.Required("drain_type", "body", m.DrainType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateHandle(formats strfmt.Registry) error {

	if err := validate.Required("handle", "body", m.Handle); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20034) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse20034) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse20034) UnmarshalBinary(b []byte) error {
	var res InlineResponse20034
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
