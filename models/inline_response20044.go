// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InlineResponse20044 inline response 200 44
// swagger:model inline_response_200_44
type InlineResponse20044 struct {

	// resource type
	// Required: true
	ResourceType *string `json:"_type"`

	// links
	// Required: true
	Links *InlineResponse20043EmbeddedLinks `json:"_links"`

	// created at
	// Required: true
	CreatedAt *string `json:"created_at"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// ssh certificate body
	// Required: true
	SSHCertificateBody *string `json:"ssh_certificate_body"`

	// ssh port forward socket
	// Required: true
	SSHPortForwardSocket *int64 `json:"ssh_port_forward_socket"`

	// ssh pty
	// Required: true
	SSHPty *bool `json:"ssh_pty"`

	// ssh user
	// Required: true
	SSHUser *string `json:"ssh_user"`

	// updated at
	// Required: true
	UpdatedAt *string `json:"updated_at"`
}

// Validate validates this inline response 200 44
func (m *InlineResponse20044) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHCertificateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPortForwardSocket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineResponse20044) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("_links", "body", m.Links); err != nil {
		return err
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *InlineResponse20044) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateSSHCertificateBody(formats strfmt.Registry) error {

	if err := validate.Required("ssh_certificate_body", "body", m.SSHCertificateBody); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateSSHPortForwardSocket(formats strfmt.Registry) error {

	if err := validate.Required("ssh_port_forward_socket", "body", m.SSHPortForwardSocket); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateSSHPty(formats strfmt.Registry) error {

	if err := validate.Required("ssh_pty", "body", m.SSHPty); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateSSHUser(formats strfmt.Registry) error {

	if err := validate.Required("ssh_user", "body", m.SSHUser); err != nil {
		return err
	}

	return nil
}

func (m *InlineResponse20044) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InlineResponse20044) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InlineResponse20044) UnmarshalBinary(b []byte) error {
	var res InlineResponse20044
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
